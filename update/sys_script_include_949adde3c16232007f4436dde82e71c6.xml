<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_bits_approve.BSWApprovalDao</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>BSWApprovalDao</name>
        <script><![CDATA[var BSWApprovalDao = Class.create();
BSWApprovalDao.prototype = {
	initialize: function() {
	},
	
	create: function (approval){
		gs.error(approval);
		
		var trans = new GlideRecord('x_snc_bits_approve_approval_transaction');
		trans.initialize();
		trans.request_state = 'Approval';
		trans.option = '{"state": "approved"}';
		trans.object = gs.getUserID();
		trans.reference_to = 'sysapproval_approver';
		trans.reference = approval;
		trans.insert();
		return null;
		
	},
	
	update: function (transaction_sys_id){
		gs.info('In Update function.');
		
		var trans = new GlideRecord('x_snc_bits_approve_approval_transaction');
		if(trans.get(transaction_sys_id)){
			var referenceToRecord=new GlideRecord(trans.reference_to);
			
			if(referenceToRecord.get(trans.u_reference)){
				
				gs.info('ReferenceToRecord loaded.');
				gs.info('referenceToRecord: ' + referenceToRecord);
				gs.info('trans.object: ' + trans.object);
				
				if (!this.validateUser(referenceToRecord, trans.object)) {
					gs.info('Transaction User and Approval User are different! Approval denied. Transaction User: ' + trans.object + ' Approval User: ' + referenceToRecord.approver);
					
				} else {
					gs.info('Transaction User and Approval User are identical. Approval allowed. Transaction User: ' + trans.object + ' Approval User: ' + referenceToRecord.approver);
					var options = JSON.decode(trans.option);
					var lastCurrentUser = gs.getUserID();
					
					var gruser = new GlideRecord('sys_user');
					if(gruser.get(trans.object)){
						gs.getSession().impersonate(trans.object);
					}
					
					for (var optionname in options){
						if (options[optionname]!=null){
							referenceToRecord[optionname]=options[optionname];
						}
					}
					referenceToRecord.update();
					if (gs.getImpersonatingUserName()) {
						gs.getSession().impersonate(lastCurrentUser);
					}
				}
				
				trans.request_state = 'Completed';
				trans.update();
				return null;
			}
		}
	},
	
	type: 'BSWApprovalDao'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-05-11 16:23:21</sys_created_on>
        <sys_id>949adde3c16232007f4436dde82e71c6</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>BSWApprovalDao</sys_name>
        <sys_package display_value="BITS Approval" source="x_snc_bits_approve">c50719a3c16232007f4436dde82e7184</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="BITS Approval">c50719a3c16232007f4436dde82e7184</sys_scope>
        <sys_update_name>sys_script_include_949adde3c16232007f4436dde82e71c6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-05-11 17:01:43</sys_updated_on>
    </sys_script_include>
</record_update>
